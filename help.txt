[defaults]
host_key_checking = false  # оце потрібно щоб не писало fingerpring yes
inventory         = ./hosts.txt  # оце потрібно щоб кожен раз не писати ansible -i hosts.txt

# тепер команда буде виглядати ansible all -m ping 
# замість ansible -i hosts.txt all -m ping


####################################################
# how can be inventory organized

[server1]
192.168.0.1
192.168.0.2


[server2]
192.168.0.3
192.168.0.4


[server3:children]
server1
server2

[server4:childer]
server3

####################################################

# також можна винести юзера і шлях до ssh у vars

[prod_servers:vars]  # same name as group name but adding vars
ansible_user=ec2-user
ansible_ssh_private_key_file=/home/ec2-user/.ssh/id_rsa.pem


[prod_servers]
linux1 ansible_host=172.168.0.1
linux2 ansible_host=172.168.0.2

####################################################

# show all servers from inventory

ansible-inventory --list


####################################################

# ad-hoc команди це прості команди які знаходять не в playbook
тобто через: ansible all -m <ad_hoc command>

example:
ansible all -m setup  # покаже інформацію про віддалений хост (змінні)

щоб запустити команду на віддалених серверах всіх
ansible all -m shell -a "uptime"

ansible all -m command -a "uptime"  # але мінус command що він не бачиьт environment variables

####################################################
Копійнути файл на всі хости

ansible all -m copy -a "src=test.txt dest=/home mode=777"  # але викине помилку permission

ansible all -m copy -a "src=test.txt dest=/home mode=777" -b -K # like become superuser

####################################################
Видалити файлик з хостів

ansible all -m file -a "path=/home/test.txt state=absent" -b -K

####################################################
Установити щось

ansible all -m apt -a "name=curl state=present" -b -K
####################################################
Видалити щось

ansible all -m apt -a "name=curl state=removed" -b -K
####################################################
Запуск сервіса після перезагрузки

ansible all -m service -a "name=httpd state=started enabled=yes" -b
####################################################
Дебаг команда

ansible all -m command -a "uptime" -v  # verbose більше інформації
ansible all -m command -a "uptime" -vv  # ще більше інформації
ansible all -m command -a "uptime" -vvv  # ще більше інформації
ansible all -m command -a "uptime" -vvvv  # ще більше інформації

####################################################
Показати всі модулі в ansible

ansible-doc -l

####################################################
Як запустити playbook

ansible-playbook playbook1.yml

#########################################################
Добавлення трігерів

- name: install apache and upload my index page 
  hosts: all
  become: yes

  vars:
    source_file: ./MyWebSite/index.html
    destination: /var/www/html

  tasks:
    - name: Install apache web server 
      apt: name=apache2 state=present

    - name: Copy file to directory
      copy: src={{ source_file }} dest= {{ destination }} mode=0555
      notify: restart Apache2  # оця команда сповістить хендлер

    - name: Start web server and make it enabled on boot
      service: name=apache2 state=started enabled=yes

    handlers:  # оце перегрузить сервіс тільки коли фалик буде завантажено
    - name: restart Apache2
      service: name=apache2 state=restarted 


#########################################################
Debug
Просто напечатає то що знаходиться у secret


- name: a1
  hosts: all
  become: yes

  vars:
  - message1: Hello
  - message2: World
  - secret: osdfho32n2
  
  tasks:
  - name: Print secret variable
    debug:
      var: secret

  tasks:
  - name: debuger
    debug:
      msg: "my war {{ secret }}"


##############################################
Приклад без tasks з debug та об'єднання

- name: a1
  hosts: all
  become: yes

  vars:
  - message1: Hello
  - message2: World
  - secret: osdfho32n2
  
  tasks:
  - name: Print secret variable
    debug:
      var: secret

  - debug:
      msg: "my war {{ secret }}"

  - debug:
      msg: "server owner {{ owner }}"
  
  - set_fact: full_name="{{ message1 }} {{ message2 }}"

  - debug:
      var: full_name   # так як тут стоїть var то {{}} не потрібно

##############################################
Покаже конфіги серваків

ansible all -m setup

Потім поля можна використовувати в плейбуках

  - debug:
      var: ansible_distribution


##############################################
Як зберегти результат команда

- shell: uptime
  register: results  # отак зберігається output
  
{{ register }}

##############################################
Вивести змінну типу os

  tasks:
    - name: show os type
      debug: var=ansible_os_family

##############################################
WHEN оператор


    - name: show os type
      debug: var=ansible_os_family

    - name: Install apache web server Ubuntu
      apt: name=apache2 state=present
      when: ansible_os_family=="Debian"

    - name: Install apache web server RedHat
      yum: name=httpd state=present
      when: ansible_os_family=="RedHat"

##############################################
loops
Три раза виведе повідомлення

  tasks:
  - name: say hello to all
    debug: msg="Hello {{ item }}"
    loop:
    - "One"
    - "Two"
    - "Three"

##############################################
register - запхати все у змінну
delay - затримка 2 секунди
retries - 10 повторів
until - допоки у файлику не буде 4 Z
  

  - name: loop antile something
    shell: echo -n Z >> myfile.txt  && cat myfile.txt
    register: output
    delay: 2
    retries: 10
    until: output.stdout.find("ZZZZ") == false

  - name: print final output
    debug: 
      var: output.stdout

debug.var - вивести output

##############################################
Як встановити багато чого в циклі

  tasks:
  - name: say hello to all
    apt: name={{ item }} state=present
    loop:
    - "python3"
    - "ssh-server"
    - "tree"

##############################################

Копійнути все що є в директорії

    - name: Copy file to directory for RedHat
      copy: src={{ item }} dest={{ destination_folder }} mode=0555
      with_fileglob: "{{ source_folder }}/*.*"
      # loop:
      #   - "1.jpeg"
      #   - "2.jpeg"
      #   - "3.jpeg"
      #   - "4.jpeg"    
      #   - "index.html"

##############################################

Як зробити щоб файл не копіювало а генерувало для кожного серверах

в хості наприклад є така лінійка
[hst]
linux1 ansible_host=192.168.0.109 owner=Akvilion

значить в index.html потрібно перейменувати на index.j2
і вставити {{ owner }}

Server host name - {{ ansible_hostname }} <br>
Server OS - {{ ansible_os_family }} <br>
IP address - {{ ansible_default_ipv4.address }} <br>

і щоб пройшла заміна потрібно вказати в плейбуку + заміна назви на html

    - name: generate index.html file
      template: src={{ source_folder }}/index.j2 dest={{ destination_folder }}/index.html mode=0555


темплейт якраз і проводить заміну

##############################################

Ролі

створюємо папку roles

запускаємо команду
ansible-galaxy init deploy_apache_web

створить папку всередині roles
суть розпихати наш playbook по фаликах

Оце кладем в плейбук
  roles:
    - { role: create_apache_web, when: ansible_system== 'Linux' }



##############################################

Зовнішні змінні

В playbook ми вказуємо на які хости ми запускаємо через
---
- name: install apache and upload my index page 
  hosts: all  # (PROD, STAGE)
  become: yes

  Але можна створити змінну для цього  # "{{ MYHOSTS }}"
---
- name: install apache and upload my index page 
  hosts: "{{ MYHOSTS }}"
  become: yes

Як засилати цю змінну через extra_vars???
ansible-playbook playbook8-roles.yml --extra_vars "MYHOSTS=STAGE owner=Griml"

Також перезапише змінну яка є в hosts.txt owner=Akvilion

##############################################

Import, Include

Це як простив варіант ролів коли з playbook ми розкидаємо по файлах

Використовувати Include

Різниця:
import зразу при запуску копіює блоки з інших файлів і заміняє змінні
include: спочатку запускає виконання playbook і коли доходить до блоку, тоді копіює

---
- name: test Include and Import
  hosts: ALL_LINUX
  become: yes

  vars:
    myVar: Hello

  - tasks:
    - name: ping hosts
      ping:

  - name: Create folders
    include: create_folder.yml

  - name: Create files
    import: create_file.yml

Як прокинути змінні

---
- name: test Include and Import
  hosts: ALL_LINUX
  become: yes

  vars:
    myVar: Hello

  - tasks:
    - name: ping hosts
      ping:

  - include: create_folder.yml

  - import: create_file.yml myVar="XXX1"

##############################################

Перенаправлення tasks на певний хост
delegate_to

---
- name: test Include and Import
  hosts: ALL_LINUX
  become: yes

  vars:
    myVar: Hello

  - tasks:
    - name: ping hosts
      ping:

    - name: create file
      copy:
        dest: /home/secret/file2.txt
        content: |
          Some txt 2 {{ myVar }}
        delegate_to: linux 1  # оця лінійка вкаже на якому саме запускати

    # на кожному хості запуститься команда запису в лог, але сам лог буде створений один на хості
    - name: delegage_to
      shell: echo asdsadsadsadsadasd >> /home/log.txt
      delegate_to: 127.0.0.1  


Як почекати поки сервера піднімаються???


- name: reboot і не чекати 
  shell: sleep3 && reboot now
  async: 1
  poll: 0

- name: почекати поки перезапустится
  wait_for: 
    host: "{{ inventory_hostname }}"
    state: started
    delay: 5
    timeout: 40
  delegate_to: 127.0.0.1  # чекати треба на мастері бо наші хости в перезагрузці

- name: reboot і не чекати 
  shell: sleep3 && reboot now
  run_once: true  # команду запустить тільки 1 раз

##############################################

Перехват помилок

Коли на одному хості буде помилка то всі інші таски після неї не будуть виконані

  tasks:
    - name: task1
      ansible.builtin.apt:
        name: treeeee
        state: present
      ignore_errors: yes
Навіть якщо буде помилка в такому завданні то інші продовжать працювати

##############################################

Перехопить помилку і розпечатає на екран в блоці debug

    - name: tasks2
      shell: ls -la /etc/
      register: results  # реєстрація результату

    - debug:
      var: results


##############################################

Таск повенен робити failed тільки тоді коли в result.stdout буде слово Hello
Тобто як зробити raise failed як в python

    - name: tasks3
      shell: echo "Hello world"
      register: results  # реєстрація результату
      failed_when: "'Hello' in results.stdout"

##############################################

Як контролювати чи команда була виконана успішно чи ні

    - name: tasks3
      shell: echo "Hello world"
      register: results  # реєстрація результату
      failed_when: results.rc == 0

    rc - значить return code (0 - успішний, 1 - неуспішний)

##############################################

Як зробити що люба помилка припиняє виконання будь яких інших задач

- name: Ansible error
  hosts: all
  any_errors_fatal: true  # оця лінійка
  become: yes

##############################################